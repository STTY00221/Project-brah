#include <LiquidCrystal_I2C.h>
#include "HX711.h"
#include <WiFi.h>
#include <HTTPClient.h>

// Setup LCD display (20 columns and 4 rows)
LiquidCrystal_I2C lcd(0x27, 20, 4);

// Setup Load Cell
HX711 scale;

// Pin definitions
const int button4Kg = 13;
const int button7Kg = 12;
const int button15Kg = 14;
const int button48Kg = 27;
const int resetButton = 26;

const int ledGreen = 25;
const int ledYellow = 33;
const int ledRed = 32;

const int gasSensorPin = 4; // Sensor to detect if gas tank is present

// Tank weights (empty)
const float emptyWeight4Kg = 6.4;
const float emptyWeight7Kg = 10.0;
const float emptyWeight15Kg = 16.3;
const float emptyWeight48Kg = 34.3;

float gasFullWeight = 0;
bool tankInstalled = false;

// WiFi and Line Notify
const char* ssid = "Admin_g2";
const char* password = "@Admin15240";
const char* lineToken = "yajltNDIPGHStIhwR9BEgYZtMw2J2mEef4k5XpqKLEX";

void setup() {
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();

  pinMode(button4Kg, INPUT);
  pinMode(button7Kg, INPUT);
  pinMode(button15Kg, INPUT);
  pinMode(button48Kg, INPUT);
  pinMode(resetButton, INPUT);
  
  pinMode(ledGreen, OUTPUT);
  pinMode(ledYellow, OUTPUT);
  pinMode(ledRed, OUTPUT);
  
  pinMode(gasSensorPin, INPUT);

  // Initialize the scale (HX711)
  scale.begin(22, 21); // CLK and DOUT pins
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  // Detect tank presence
  tankInstalled = digitalRead(gasSensorPin);
  
  if (!tankInstalled) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("NO GAS TANK INSTALLED");
    delay(2000);
    return;
  }
  
  // Check which button is pressed for gas type selection
  if (digitalRead(button4Kg) == HIGH) {
    gasFullWeight = 4.0;
    handleGasTank(emptyWeight4Kg, gasFullWeight);
  } else if (digitalRead(button7Kg) == HIGH) {
    gasFullWeight = 7.0;
    handleGasTank(emptyWeight7Kg, gasFullWeight);
  } else if (digitalRead(button15Kg) == HIGH) {
    gasFullWeight = 15.0;
    handleGasTank(emptyWeight15Kg, gasFullWeight);
  } else if (digitalRead(button48Kg) == HIGH) {
    gasFullWeight = 48.0;
    handleGasTank(emptyWeight48Kg, gasFullWeight);
  }

  if (digitalRead(resetButton) == HIGH) {
    resetSystem();
  }
}

void handleGasTank(float emptyWeight, float fullWeight) {
  // Get the current weight from the scale
  float currentWeight = scale.get_units();
  float gasWeight = currentWeight - emptyWeight;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Gas: ");
  lcd.print(gasWeight, 1);
  lcd.print(" kg");

  // Determine gas level and update LEDs and LCD
  if (gasWeight > fullWeight * 0.75) {
    lcd.setCursor(0, 1);
    lcd.print("HIGH GAS VOLUME");
    updateLEDs(HIGH);
  } else if (gasWeight > fullWeight * 0.2) {
    lcd.setCursor(0, 1);
    lcd.print("LOW GAS VOLUME");
    updateLEDs(LOW);
    sendLineNotify("Gas is low!");
  } else if (gasWeight <= fullWeight * 0.2) {
    lcd.setCursor(0, 1);
    lcd.print("OUT OF GAS");
    updateLEDs(OUT);
    sendLineNotify("Gas is out!");
  }
}

void updateLEDs(int level) {
  switch (level) {
    case HIGH:
      digitalWrite(ledGreen, HIGH);
      digitalWrite(ledYellow, LOW);
      digitalWrite(ledRed, LOW);
      break;
    case LOW:
      digitalWrite(ledGreen, LOW);
      digitalWrite(ledYellow, HIGH);
      digitalWrite(ledRed, LOW);
      break;
    case OUT:
      digitalWrite(ledGreen, LOW);
      digitalWrite(ledYellow, LOW);
      digitalWrite(ledRed, HIGH);
      break;
  }
}

void resetSystem() {
  lcd.clear();
  lcd.print("System Reset");
  delay(1000);
  lcd.clear();
  updateLEDs(HIGH); // Reset to full
}

void sendLineNotify(String message) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("https://notify-api.line.me/api/notify");
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    http.addHeader("Authorization", "Bearer " + String(lineToken));

    int httpResponseCode = http.POST("message=" + message);
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.println("Error sending message");
    }
    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}
